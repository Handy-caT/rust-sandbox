use clap::{Arg, ArgAction, Command, Parser, Subcommand, value_parser};

pub fn cli() -> Command {
    Command::new("db")
        .about("cli using for db access")
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(
            Command::new("add")
                .about("add new object to the database")
                .subcommand(
                    Command::new("user")
                        .about("add new user to the database")
                        .arg(Arg::new("name")
                            .help("name of the user to add")
                            .required(true)
                            .long("name")
                            .short('n')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .num_args(1)
                        )
                        .arg(Arg::new("role")
                            .help("role slug's to add to the user")
                            .required(true)
                            .long("role")
                            .short('r')
                            .action(ArgAction::Append)
                            .value_parser(value_parser!(String))
                            .num_args(1..)
                        )
                )
                .subcommand(
                    Command::new("role")
                        .about("add new role to the database")
                        .arg(Arg::new("name")
                            .help("name of the role to add")
                            .required(true)
                            .long("name")
                            .short('n')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .num_args(1)
                        )
                        .arg(Arg::new("slug")
                            .help("slug of a role, must be unique between roles")
                            .required(true)
                            .long("slug")
                            .short('s')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .num_args(1)
                        )
                        .arg(Arg::new("permissions")
                            .help("roles permissions")
                            .required(true)
                            .long("decs")
                            .short('d')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .num_args(1)
                        )
                )

        )
        .subcommand(
            Command::new("delete")
                .about("delete object from the database")
                .subcommand(
                    Command::new("user")
                        .about("delete user from the database")
                        .arg(Arg::new("name")
                            .help("name of the user to delete")
                            .required(true)
                            .long("name")
                            .short('n')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .num_args(1)
                        )
                        .arg(Arg::new("id")
                            .help("id of a user to delete")
                            .required(true)
                            .long("id")
                            .short('i')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(i32))
                            .conflicts_with("name")
                            .num_args(1)
                        )
                )
                .subcommand(
                    Command::new("role")
                        .about("delete role from the database")
                        .arg(Arg::new("name")
                            .help("name of the role to delete")
                            .required(true)
                            .long("name")
                            .short('n')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .num_args(1)
                        )
                        .arg(Arg::new("slug")
                            .help("slug of a role, must be unique between roles")
                            .required(true)
                            .long("slug")
                            .short('s')
                            .action(ArgAction::Set)
                            .value_parser(value_parser!(String))
                            .conflicts_with("name")
                            .num_args(1)
                        )
                )
        )
}